# -*- coding: utf-8 -*-
"""only_image_colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11TPWhy8MzyPxvNqxYFw1rLHOx_YKOdUi
"""

# подключаем гугл-диск

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import tensorflow_hub as hub
import tensorflow as tf
from tensorflow.keras.layers import *
from tensorflow.keras import backend as K
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import plot_model
from tensorflow.keras.metrics import Accuracy, Precision, Recall, AUC, TrueNegatives, TruePositives, FalseNegatives, FalsePositives

import matplotlib.pyplot as plt

import PIL
from PIL import Image
import os

from sklearn.preprocessing import MinMaxScaler

def f1(y_true, y_pred):
    y_true = K.flatten(y_true)
    y_pred = K.flatten(y_pred)
    return 2 * (K.sum(y_true * y_pred)+ K.epsilon()) / (K.sum(y_true) + K.sum(y_pred) + K.epsilon())

def plot_history(history):
  hist = pd.DataFrame(history.history)
  hist['epoch'] = history.epoch

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('AUC')
  plt.plot(hist['epoch'], hist['auc'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_auc'],
           label = 'Val Error')
  #plt.ylim([0,5])
  plt.legend()

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('F1_score')
  plt.plot(hist['epoch'], hist['f1'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_f1'],
           label = 'Val Error')
  plt.legend()
  plt.show()

data = pd.read_csv('/content/drive/My Drive/IMAGE_DATA_COR/DP_cor.csv', sep=';')
for i in [
    'trunk_st', 
    'LAD_st',
    'lcx_stenosis',
    'RCA_stenosis'
]:
    data[i] = data[i].apply(lambda x: 1 if x >= 50 else 0)

X = data.iloc[:,1:23]
scaler = MinMaxScaler(feature_range=(0, 1))
X[X.columns] = scaler.fit_transform(X[X.columns])
y1 = data.iloc[:,23:-1]

test = pd.read_csv('/content/drive/My Drive/IMAGE_DATA_COR/test_DL.csv', sep=';')
for i in [
    'trunk_st', 
    'LAD_st',
    'lcx_stenosis',
    'RCA_stenosis'
]:
    test[i] = test[i].apply(lambda x: 1 if x >= 50 else 0)
    
X_test = test.iloc[:,1:23]
scaler = MinMaxScaler(feature_range=(0, 1))
X_test[X_test.columns] = scaler.fit_transform(X_test[X_test.columns])
y_test = test.iloc[:,23:-1]

data_image_test = []
for k in os.listdir('/content/drive/My Drive/IMAGE_DATA_COR/TEST-ECG'):
    if k.endswith('.jpg'):
        img = Image.open('/content/drive/My Drive/IMAGE_DATA_COR/TEST-ECG/'+k)
        #img = img.convert('L')
        img = img.resize((224, 224))
        data_image_test += [np.array(img) / 255.]
data_image = []
for k in os.listdir('/content/drive/My Drive/IMAGE_DATA_COR/ЭКГ'):
    if k.endswith('.jpg'):
        img = Image.open('/content/drive/My Drive/IMAGE_DATA_COR/ЭКГ/'+k)
        #img = img.convert('L')
        img = img.resize((224, 224))
        data_image += [np.array(img) / 255.]

feature_extractor_url = 'https://tfhub.dev/tensorflow/efficientnet/b3/feature-vector/1'
hub_layer_1 = hub.KerasLayer(feature_extractor_url, input_shape=((224, 224)+ (3,)), trainable=True)

tf.keras.backend.clear_session()

input_1 = Input(shape=(224, 224, 3), name = "Input_image")
x = hub_layer_1(input_1)
#x = Dropout(0.8)(x)
#x = Dense(128, activation="elu")(x)
predictions = Dense(13, activation="sigmoid")(x)

mod = Model(inputs=input_1, outputs=predictions)

mod.compile(optimizer='adam', loss='binary_crossentropy', metrics=['AUC', f1])
mod.summary()

batch_size = 50

history = mod.fit( 
np.array(data_image), y1,
batch_size = batch_size,
steps_per_epoch=2,     #len(data_image)//batch_size,
validation_split=0.1,
epochs=20,
shuffle=True,
verbose=1
)

plot_history(history)

pred_2 = pd.DataFrame(mod.predict(np.array(data_image_test)) > 0.5, columns=y1.columns) * 1

for i in [
    Accuracy(),
    Precision(),
    Recall(),
    AUC(),
    TrueNegatives(),
    TruePositives(),
    FalseNegatives(),
    FalsePositives()
]:
    _ = i.update_state(y_test.values, pred_2)
    print(f'{i.name}: {"%0.2f" % i.result().numpy()}')
print('f1:', f1(y_test.values.astype('float32'), pred_2.astype('float32')).numpy())

pred_3 = pd.DataFrame(mod.predict(np.array(np.array(data_image))) > 0.5, columns=y1.columns) * 1
sum(pred_3['LAD_st'])

pred_3 = pd.DataFrame(mod.predict(np.array(np.array(data_image))) > 0.5, columns=y1.columns) * 1
sum(pred_3['RCA_sub_occ'])

pred_2

y_test

